##
# (c) 2021-2025
#     Cloud Ops Works LLC - https://cloudops.works/
#     Find us on:
#       GitHub: https://github.com/cloudopsworks
#       WebSite: https://cloudops.works
#     Distributed Under Apache v2.0 License
#
name: Get Configuration Values
author: cloudopsworks
description: Get configuration values for the workflow from the source vars
inputs:
  source_path:
    description: 'The path to the source code'
    required: false
    default: 'source'
outputs:
  environment:
    description: 'The environment to use for the build'
    value: ${{ steps.workspace.outputs.workspace }}
  is_release:
    description: 'The release flag'
    value: ${{ steps.workspace.outputs.isRelease }}
  is_pre_release:
    description: 'The pre-release flag'
    value: ${{ steps.workspace.outputs.isPreRelease }}
  project_key:
    description: 'The release source name, usually the repository name'
    value: ${{ steps.getowner.outputs.repo_name }}
  project_owner:
    description: 'The release source owner, usually the repository owner'
    value: ${{ steps.project_owner.outputs.result != '' && steps.project_owner.outputs.result || steps.getowner.outputs.owner }}
  release_name:
    description: 'The target name for the deployment'
    value: ${{ steps.workspace.outputs.targetName != '' && steps.workspace.outputs.targetName || steps.getowner.outputs.repo_name }}
  deployment_enabled:
    description: 'The deployment enabled flag'
    value: ${{ steps.deployment_disabled.outputs.result == 'false' }}
  has_qualifier:
    description: 'The qualifier flag, set when doing version tagging with deploy-[qualifier]'
    value: ${{ steps.workspace.outputs.hasQualifier }}
  deployment_name:
    description: 'The deployment name,  composed of branch and environment'
    value: ${{ steps.workspace.outputs.deploymentName }}
  cloud:
    description: 'Target cloud deployment, uppercase, AWS, GCP, AZURE'
    value: ${{ steps.cloud.outputs.result }}
  cloud_type:
    description: 'Target cloud deployment type, lowercase, k8s, ecs, aks, beanstalk, kubernetes, lambda'
    value: ${{ steps.cloud_type.outputs.result }}
  apis_enabled:
    description: 'The APIs enabled flag'
    value: ${{ steps.apis_enabled.outputs.result }}
  is_automatic:
    description: 'The automatic setting flag'
    value: ${{ steps.is_automatic.outputs.result }}
  aws_region:
    description: 'The AWS Region value, only on AWS deployment'
    value: ${{ steps.aws_region.outputs.result }}
  build_aws_sts_role_arn:
    description: 'The AWS STS Role ARN value, only on AWS build'
    value: ${{ steps.build_aws_sts_role_arn.outputs.result }}
  deploy_aws_sts_role_arn:
    description: 'The AWS STS Role ARN value, only on AWS deployment'
    value: ${{ steps.deploy_aws_sts_role_arn.outputs.result }}
  build_azure_resource_group:
    description: 'The Azure Resource Group value, only on Azure build'
    value: ${{ steps.build_azure_rg.outputs.result }}
  deploy_azure_resource_group:
    description: 'The Azure Resource Group value, only on Azure deployment'
    value: ${{ steps.deploy_azure_rg.outputs.result }}
  runner_set:
    description: 'The runner set for the build'
    value: ${{ steps.runner_set_env.outputs.result != '' && steps.runner_set_env.outputs.result || steps.runner_set.outputs.result }}
  is_library:
    description: 'The library build flag'
    value: ${{ steps.is_library.outputs.result }}
  container_enabled:
    description: 'The container enabled flag'
    value: ${{ steps.cloud_type.outputs.result == 'eks' || steps.cloud_type.outputs.result == 'aks' || steps.cloud_type.outputs.result == 'gke' || steps.cloud_type.outputs.result == 'kubernetes' || steps.has_preview.outputs.result == 'true' }}
  blue_green_enabled:
    description: 'The blue-green deployment enabled flag'
    value: ${{ steps.blue_green.outputs.result }}
  has_preview:
    description: 'The preview enabled flag'
    value: ${{ steps.has_preview.outputs.result }}
  observability_enabled:
    description: 'The observability enabled flag'
    value: ${{ steps.observability.outputs.result }}
  observability_agent:
    description: 'The observability agent type, can be one of: xray, datadog, newrelic, dynatrace'
    value: ${{ steps.observability_agent.outputs.result }}

runs:
  using: 'composite'
  steps:
    - name: Install runner-tools
      uses: cloudopsworks/blueprints/ci/common/install/runner-tools@v5
      # TODO: solve the download of proper tools on cloud environment

    # Get the owner repo
    - name: Get owner
      id: getowner
      shell: bash
      run: |
        repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
        repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
        echo "owner=$repo_owner" >> $GITHUB_OUTPUT
        echo "repo_name=$repo_name" >> $GITHUB_OUTPUT        

    # Get repository_owner from inputs-global.yaml as project_owner id
    - name: Get Project Owner
      id: project_owner
      shell: bash
      working-directory: ${{ inputs.source_path }}
      run: |
        RET=$(yq e '.repository_owner' .github/vars/inputs-global.yaml)
        echo "result=$RET" >> $GITHUB_OUTPUT

    # Get the deployments configuration
    - name: Get the deployments configuration
      id: deploy_conf
      shell: bash
      working-directory: ${{ inputs.source_path }}
      run: |
        RET=$(yq -o=json -I=0 '.cd.deployments' .github/cloudopsworks-ci.yaml)
        echo "result=$RET" >> $GITHUB_OUTPUT

    # Get the cloud entry from .github/vars/inputs-global.yaml as plain text
    - name: Get Cloud Entry
      id: cloud
      shell: bash
      working-directory: ${{ inputs.source_path }}
      run: |
        RET=$(yq e '.cloud' .github/vars/inputs-global.yaml | tr '[:lower:]' '[:upper:]')
        echo "result=$RET" >> $GITHUB_OUTPUT

    # Get the cloud type from github/vars/inputs-global.yaml as plain text
    - name: Get Cloud Type
      id: cloud_type
      shell: bash
      working-directory: ${{ inputs.source_path }}
      run: |
        RET=$(yq e '.cloud_type' .github/vars/inputs-global.yaml)
        echo "result=$RET" >> $GITHUB_OUTPUT

    # Get the apis enabled from .github/cloudopsworks-ci.yaml as plain text
    - name: Get APIs Enabled
      id: apis_enabled
      shell: bash
      working-directory: ${{ inputs.source_path }}
      run: |
        RET=$(yq e '.apis.enabled and true' .github/vars/inputs-global.yaml)
        echo "result=$RET" >> $GITHUB_OUTPUT

    # Get the automatic setting from .github/cloudopsworks-ci.yaml as plain text
    - name: Get Automatic Setting
      id: automatic
      shell: bash
      working-directory: ${{ inputs.source_path }}
      run: |
        RET=$(yq e '.cd.automatic and true' .github/cloudopsworks-ci.yaml)
        echo "result=$RET" >> $GITHUB_OUTPUT

    # TODO: deprecate isEnabled output and parsing
    # Set the appropriate workspace from what is configured from the deploy_conf step
    # Result is stored as JSON with the format found on the cd.deployments section on .github/cloudopsworks-ci.yaml
    - name: Set the appropriate workspace
      id: workspace
      uses: actions/github-script@v7
      with:
        script: |
          const deployments = JSON.parse('${{ steps.deploy_conf.outputs.result }}');
          const head = '${{ github.head_ref }}';
          const base = '${{ github.base_ref }}';
          const ref = '${{ github.ref_name }}';
          var branch = base !== '' ? base : ref;
          
          var environment = '';
          var isRelease = false;
          var isPreRelease = false;
          var targetName = '';
          var isEnabled = true;
          var hasQualifier = false;
          var deploymentName = '';
          
          if ( branch.startsWith('support') ) {
            const oneMatch = deployments.support.find( ({ match }) => branch.match(new RegExp('support/'+match,'g')) );
            environment = oneMatch.env;
            targetName = oneMatch.targetName;
          } else if ( branch.startsWith('release') ) {
            isPreRelease = true;
            isEnabled = (deployments.test['enabled'] == null ? true : (deployments.test['enabled'] === 'true'));
            environment = deployments.test.env;
            if ( 'targetName' in deployments.test ) {
              targetName = deployments.test.targetName;
            }
            deploymentName = `test/${environment}`;
          } else if ( branch === 'develop' ) {
            isEnabled = (deployments.develop['enabled'] == null ? true : (deployments.develop['enabled'] === 'true'));
            environment = deployments.develop.env;
            if ( 'targetName' in deployments.develop ) {
              targetName = deployments.develop.targetName;
            }
            deploymentName = `develop/${environment}`;
          } else {
            // This semver structure is obtained as per specification https://semver.org/ & https://regex101.com/r/vkijKf/1/
            semver = branch.match(/^v(?<major>0|[1-9]\d*)\.(?<minor>0|[1-9]\d*)\.(?<patch>0|[1-9]\d*)(?:-(?<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?/);
            if ( semver != null ) {
              const pre = semver['groups']['prerelease'];
              const buildmeta = semver['groups']['buildmetadata'];
              // buildmeta format is deploy-XXXX.yyy.zzz
              // the metasuffix should be the deploy- prefix
              if ( pre != null && buildmeta != null) {
                const metasuffix = buildmeta.match(/deploy-(?<data>.*)/);
                isEnabled = (deployments.prerelease['enabled'] == null ? true : (deployments.prerelease['enabled'] === 'true'));
                isPreRelease = true;
                hasQualifier = true;
                environment = deployments.prerelease.targets[metasuffix.groups.data].env;
                if ( 'targetName' in deployments.prerelease.targets[metasuffix.groups.data] ) {
                  targetName = deployments.prerelease.targets[metasuffix.groups.data].targetName;
                }
                deploymentName = `prerelease/${metasuffix.groups.data}/${environment}`;
              } else if ( pre != null ) {
                isEnabled = (deployments.prerelease['enabled'] == null ? true : (deployments.prerelease['enabled'] === 'true'));
                // Regular expression to match following semver pattern: v1.0.2-alpha.10-uoiretu834u
                isPreRelease = true;
                environment = deployments.prerelease.env;
                if ( 'targetName' in deployments.prerelease ) {
                  targetName = deployments.prerelease.targetName;
                }
                deploymentName = `prerelease/${environment}`;
              } else if ( buildmeta != null ) {
                const metasuffix = buildmeta.match(/deploy-(?<data>.*)/);
                isRelease = true;
                hasQualifier = true;
                environment = deployments.release.targets[metasuffix.groups.data].env;
                if ( 'targetName' in deployments.release.targets[metasuffix.groups.data] ) {
                  targetName = deployments.release.targets[metasuffix.groups.data].targetName;
                }
                deploymentName = `release/${metasuffix.groups.data}/${environment}`;
              } else {
                isRelease = true;
                environment = deployments.release.env;
                if ( 'targetName' in deployments.release ) {
                  targetName = deployments.release.targetName;
                }
                deploymentName = `release/${environment}`;
              }
            } else if ( branch === 'master' || branch === 'main' ) {
              isRelease = true;
              environment = deployments.release.env;
              if ( 'targetName' in deployments.release ) {
                targetName = deployments.release.targetName;
              }
              deploymentName = `release/${environment}`;
            } else {
              core.setFailed('Branch not supported');
            }
          }
          
          const outputV = { 
            environment: environment, 
            isPreRelease: isPreRelease, 
            isRelease: isRelease,
            targetName: targetName,
            isEnabled: isEnabled,
            hasQualifier: hasQualifier,
            deploymentName: deploymentName
          }; 
          core.setOutput('workspace', environment);
          core.setOutput('workspace_upper', environment.toUpperCase());
          core.setOutput('isRelease', isRelease);
          core.setOutput('isPreRelease', isPreRelease);
          core.setOutput('targetName', targetName);
          core.setOutput('isEnabled', isEnabled);
          core.setOutput('hasQualifier', hasQualifier);
          core.setOutput('deploymentName', deploymentName);
          
          return outputV;

    # Check the specific environment vars/input-*.yaml exists if not: hard fail
    - name: Check specific environment file exists
      id: check_env_file
      working-directory: ${{ inputs.source_path }}
      shell: bash
      run: |
        fexist=false
        if [ ! -f .github/vars/inputs-${{ steps.workspace.outputs.workspace }}.yaml ]; then
          echo "::warning::File .github/vars/inputs-${{ steps.workspace.outputs.workspace }}.yaml does not exist. Most configurations will not be available."
        else
          fexist=true
        fi
        echo "result=$fexist" >> $GITHUB_OUTPUT

    # Get the blue_green marker from the inputs-<environment>.yaml file
    - name: Get Blue/Green Setting
      id: blue_green
      shell: bash
      if: steps.check_env_file.outputs.result == 'true'
      working-directory: ${{ inputs.source_path }}
      run: |
        RET=$(yq -I=0 '.blue_green and true' .github/vars/inputs-${{ steps.workspace.outputs.workspace }}.yaml)
        echo "result=$RET" >> $GITHUB_OUTPUT

    # Get the AWS Region value from the inputs-<environment>.yaml file
    - name: Set the appropriate values for REGION
      id: aws_region
      if: ${{ steps.cloud.outputs.result == 'AWS' && steps.check_env_file.outputs.result == 'true' }}
      shell: bash
      working-directory: ${{ inputs.source_path }}
      run: |
        RET=$(yq -I=0 '.aws.region // ""' .github/vars/inputs-${{ steps.workspace.outputs.workspace }}.yaml)
        echo "result=$RET" >> $GITHUB_OUTPUT

    # Get the AWS Build STS Role ARN value from the inputs-<environment>.yaml file
    - name: Set the appropriate values for STS Role ARN (Build)
      id: build_aws_sts_role_arn
      if: ${{ steps.cloud.outputs.result == 'AWS' && steps.check_env_file.outputs.result == 'true' }}
      shell: bash
      working-directory: ${{ inputs.source_path }}
      run: |
        RET=$(yq -I=0 '.aws.build_sts_role_arn // .aws.sts_role_arn  // ""' .github/vars/inputs-${{ steps.workspace.outputs.workspace }}.yaml)
        echo "result=$RET" >> $GITHUB_OUTPUT

    # Get the AWS Deployment STS Role ARN value from the inputs-<environment>.yaml file
    - name: Set the appropriate values for STS Role ARN (Deploy)
      id: deploy_aws_sts_role_arn
      if: ${{ steps.cloud.outputs.result == 'AWS' && steps.check_env_file.outputs.result == 'true' }}
      shell: bash
      working-directory: ${{ inputs.source_path }}
      run: |
        RET=$(yq -I=0 '.aws.deploy_sts_role_arn // .aws.sts_role_arn  // ""' .github/vars/inputs-${{ steps.workspace.outputs.workspace }}.yaml)
        echo "result=$RET" >> $GITHUB_OUTPUT

    # Get the Azure Build RG value from the inputs-<environment>.yaml file
    - name: Set the appropriate values for Azure RG (Build)
      id: build_azure_rg
      if: ${{ steps.cloud.outputs.result == 'AZURE' && steps.check_env_file.outputs.result == 'true' }}
      shell: bash
      working-directory: ${{ inputs.source_path }}
      run: |
        RET=$(yq -I=0 '.azure.build_resource_group // .azure.resource_group // "no-resource-group"' .github/vars/inputs-${{ steps.workspace.outputs.workspace }}.yaml)
        echo "result=$RET" >> $GITHUB_OUTPUT

    # Get the Azure Deploy RG value from the inputs-<environment>.yaml file
    - name: Set the appropriate values for Azure RG (Deploy)
      id: deploy_azure_rg
      if: ${{ steps.cloud.outputs.result == 'AZURE' && steps.check_env_file.outputs.result == 'true' }}
      shell: bash
      working-directory: ${{ inputs.source_path }}
      run: |
        RET=$(yq -I=0 '.azure.deploy_resource_group // .azure.resource_group // "no-resource-group"' .github/vars/inputs-${{ steps.workspace.outputs.workspace }}.yaml)
        echo "result=$RET" >> $GITHUB_OUTPUT

    - name: Get the Runner Set for this build
      id: runner_set
      shell: bash
      working-directory: ${{ inputs.source_path }}
      run: |
        RET=$(yq -I=0 '.runner_set // "ubuntu-latest"' .github/vars/inputs-global.yaml)
        echo "result=$RET" >> $GITHUB_OUTPUT

    - name: Get the Runner Set for the environment
      id: runner_set_env
      shell: bash
      if: steps.check_env_file.outputs.result == 'true'
      working-directory: ${{ inputs.source_path }}
      run: |
        RET=$(yq -I=0 '.runner_set // ""' .github/vars/inputs-${{ steps.workspace.outputs.workspace }}.yaml)
        echo "result=$RET" >> $GITHUB_OUTPUT

    - name: Get if the build is for library
      id: is_library
      shell: bash
      working-directory: ${{ inputs.source_path }}
      run: |
        RET=$(yq -I=0 '.isLibrary and true' .github/vars/inputs-global.yaml)
        echo "result=$RET" >> $GITHUB_OUTPUT

    # Get preview enabled
    - name: Get pipeline preview enabled
      id: has_preview
      shell: bash
      working-directory: ${{ inputs.source_path }}
      run: |
        RET=$(yq e '.preview.enabled and true' .github/vars/inputs-global.yaml)
        echo "result=$RET" >> $GITHUB_OUTPUT

    # Get if deployment is disabled:
    - name: Get deployment disabled for the environment
      id: deployment_disabled
      shell: bash
      if: steps.check_env_file.outputs.result == 'true'
      working-directory: ${{ inputs.source_path }}
      run: |
        RET=$(yq -I=0 '.disable_deploy and true' .github/vars/inputs-${{ steps.workspace.outputs.workspace }}.yaml)
        echo "result=$RET" >> $GITHUB_OUTPUT

    # Get if is automatic environment:
    - name: Get is Automatic environment
      id: is_automatic
      shell: bash
      working-directory: ${{ inputs.source_path }}
      run: |
        RET=$(yq -I=0 '.cd.automatc and true' .github/cloudopsworks-ci.yaml)
        echo "result=$RET" >> $GITHUB_OUTPUT

    # Get Observability Configuration
    - name: Get Observability Configuration
      id: observability
      shell: bash
      working-directory: ${{ inputs.source_path }}
      run: |
        RET=$(yq -I=0 '.observability.enabled // "false"' .github/vars/inputs-global.yaml)
        echo "result=$RET" >> $GITHUB_OUTPUT

    - name: Get Observability Agent Type
      id: observability_agent
      shell: bash
      working-directory: ${{ inputs.source_path }}
      if: steps.observability.outputs.result == 'true'
      run: |
        RET=$(yq -I=0 '.observability.agent // "xray"' .github/vars/inputs-global.yaml)
        echo "result=$RET" >> $GITHUB_OUTPUT