##
# (c) 2024 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Get Configuration Values for IAC repositories
author: cloudopsworks
description: Get configuration values for the workflow from the source vars specific implementation for IAC repositories
inputs:
  source_path:
    description: 'The path to the source code'
    required: false
    default: 'source'
outputs:
  environment:
    description: 'The environment to use for the build'
    value: ${{ steps.workspace.outputs.workspace }}
  is_release:
    description: 'The release flag'
    value: ${{ steps.workspace.outputs.isRelease }}
  is_pre_release:
    description: 'The pre-release flag'
    value: ${{ steps.workspace.outputs.isPreRelease }}
  project_key:
    description: 'The release source name, usually the repository name'
    value: ${{ steps.getowner.outputs.repo_name }}
  project_owner:
    description: 'The release source owner, usually the repository owner'
    value: ${{ steps.getowner.outputs.owner }}
  release_name:
    description: 'The target name for the deployment'
    value: ${{ steps.workspace.outputs.targetName != '' && steps.workspace.outputs.targetName || steps.getowner.outputs.repo_name }}
  deployment_enabled:
    description: 'The deployment enabled flag'
    value: ${{ steps.deployment_disabled.outputs.result == 'false' }}
  has_qualifier:
    description: 'The qualifier flag, set when doing version tagging with deploy-[qualifier]'
    value: ${{ steps.workspace.outputs.hasQualifier }}
  deployment_name:
    description: 'The deployment name,  composed of branch and environment'
    value: ${{ steps.workspace.outputs.deploymentName }}
  is_automatic:
    description: 'The automatic setting flag'
    value: ${{ steps.is_automatic.outputs.result }}
  aws_region:
    description: 'The AWS Region value, only on AWS deployment'
    value: ${{ steps.aws_region.outputs.result }}
  runner_set:
    description: 'The runner set for the build'
    value: ${{ steps.runner_set.outputs.result }}

runs:
  using: 'composite'
  steps:
    - name: Install runner-tools
      working-directory: /tmp
      shell: bash
      run: |
        echo "::group::Install runner-tools"
        (type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y))
        sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
        sudo apt install -y gh jq curl zip unzip python3 python3-pip
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -qo awscliv2.zip
        which aws || sudo ./aws/install
        which aws && sudo ./aws/install --update
        echo "::endgroup::"

    # Get the owner repo
    - name: Get owner
      id: getowner
      shell: bash
      run: |
        repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
        repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
        echo "owner=$repo_owner" >> $GITHUB_OUTPUT
        echo "repo_name=$repo_name" >> $GITHUB_OUTPUT        

    # Get the deployments configuration
    - name: Get the deployments configuration
      id: deploy_conf
      shell: bash
      run: |
        RET=$(yq -o=json -I=0 '.cd.deployments' ${{ inputs.source_path }}/.github/cloudopsworks-ci.yaml)
        echo "result=$RET" >> $GITHUB_OUTPUT

    # Get the automatic setting from .github/cloudopsworks-ci.yaml as plain text
    - name: Get Automatic Setting
      id: automatic
      shell: bash
      run: |
        RET=$(yq e '.cd.automatic and true' ${{ inputs.source_path }}/.github/cloudopsworks-ci.yaml)
        echo "result=$RET" >> $GITHUB_OUTPUT

    # TODO: deprecate isEnabled output and parsing
    # Set the appropriate workspace from what is configured from the deploy_conf step
    # Result is stored as JSON with the format found on the cd.deployments section on .github/cloudopsworks-ci.yaml
    - name: Set the appropriate workspace
      id: workspace
      uses: actions/github-script@v7
      with:
        script: |
          const deployments = JSON.parse('${{ steps.deploy_conf.outputs.result }}');
          const head = '${{ github.head_ref }}';
          const base = '${{ github.base_ref }}';
          const ref = '${{ github.ref_name }}';
          var branch = base !== '' ? base : ref;
          
          var environment = '';
          var isRelease = false;
          var isPreRelease = false;
          var targetName = '';
          var isEnabled = true;
          var hasQualifier = false;
          var deploymentName = '';
          
          if ( branch.startsWith('support') ) {
            const oneMatch = deployments.support.find( ({ match }) => branch.match(new RegExp('support/'+match,'g')) );
            environment = oneMatch.env;
            targetName = oneMatch.targetName;
          } else if ( branch.startsWith('release') ) {
            isPreRelease = true;
            isEnabled = (deployments.test['enabled'] == null ? true : (deployments.test['enabled'] === 'true'));
            environment = deployments.test.env;
            if ( 'targetName' in deployments.test ) {
              targetName = deployments.test.targetName;
            }
            deploymentName = `test/${environment}`;
          } else if ( branch === 'develop' ) {
            isEnabled = (deployments.develop['enabled'] == null ? true : (deployments.develop['enabled'] === 'true'));
            environment = deployments.develop.env;
            if ( 'targetName' in deployments.develop ) {
              targetName = deployments.develop.targetName;
            }
            deploymentName = `develop/${environment}`;
          } else {
            // This semver structure is obtained as per specification https://semver.org/ & https://regex101.com/r/vkijKf/1/
            semver = branch.match(/^v(?<major>0|[1-9]\d*)\.(?<minor>0|[1-9]\d*)\.(?<patch>0|[1-9]\d*)(?:-(?<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?/);
            if ( semver != null ) {
              const pre = semver['groups']['prerelease'];
              const buildmeta = semver['groups']['buildmetadata'];
              // buildmeta format is deploy-XXXX.yyy.zzz
              // the metasuffix should be the deploy- prefix
              if ( pre != null && buildmeta != null) {
                const metasuffix = buildmeta.match(/deploy-(?<data>.*)/);
                isEnabled = (deployments.prerelease['enabled'] == null ? true : (deployments.prerelease['enabled'] === 'true'));
                isPreRelease = true;
                hasQualifier = true;
                environment = deployments.prerelease.targets[metasuffix.groups.data].env;
                if ( 'targetName' in deployments.prerelease.targets[metasuffix.groups.data] ) {
                  targetName = deployments.prerelease.targets[metasuffix.groups.data].targetName;
                }
                deploymentName = `prerelease/${buildmeta}/${environment}`;
              } else if ( pre != null ) {
                isEnabled = (deployments.prerelease['enabled'] == null ? true : (deployments.prerelease['enabled'] === 'true'));
                // Regular expression to match following semver pattern: v1.0.2-alpha.10-uoiretu834u
                isPreRelease = true;
                environment = deployments.prerelease.env;
                if ( 'targetName' in deployments.prerelease ) {
                  targetName = deployments.prerelease.targetName;
                }
                deploymentName = `prerelease/${environment}`;
              } else if ( buildmeta != null ) {
                const metasuffix = buildmeta.match(/deploy-(?<data>.*)/);
                isRelease = true;
                hasQualifier = true;
                environment = deployments.release.targets[metasuffix.groups.data].env;
                if ( 'targetName' in deployments.release.targets[metasuffix.groups.data] ) {
                  targetName = deployments.release.targets[metasuffix.groups.data].targetName;
                }
                deploymentName = `release/${buildmeta}/${environment}`;
              } else {
                isRelease = true;
                environment = deployments.release.env;
                if ( 'targetName' in deployments.release ) {
                  targetName = deployments.release.targetName;
                }
                deploymentName = `release/${environment}`;
              }
            } else if ( branch === 'master' || branch === 'main' ) {
              isRelease = true;
              environment = deployments.release.env;
              if ( 'targetName' in deployments.release ) {
                targetName = deployments.release.targetName;
              }
              deploymentName = `release/${environment}`;
            } else {
              core.setFailed('Branch not supported');
            }
          }
          
          const outputV = { 
            environment: environment, 
            isPreRelease: isPreRelease, 
            isRelease: isRelease,
            targetName: targetName,
            isEnabled: isEnabled,
            hasQualifier: hasQualifier,
            deploymentName: deploymentName
          }; 
          core.setOutput('workspace', environment);
          core.setOutput('workspace_upper', environment.toUpperCase());
          core.setOutput('isRelease', isRelease);
          core.setOutput('isPreRelease', isPreRelease);
          core.setOutput('targetName', targetName);
          core.setOutput('isEnabled', isEnabled);
          core.setOutput('hasQualifier', hasQualifier);
          core.setOutput('deploymentName', deploymentName);
          
          return outputV;

    - name: Get the Runner Set for this build
      id: runner_set
      shell: bash
      run: |
        RET=$(yq -I=0 '.runner_set // "ubuntu-latest"' ${{ inputs.source_path }}/global-inputs.yaml)
        echo "result=$RET" >> $GITHUB_OUTPUT
