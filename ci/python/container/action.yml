##
# (c) 2021-2025
#     Cloud Ops Works LLC - https://cloudops.works/
#     Find us on:
#       GitHub: https://github.com/cloudopsworks
#       WebSite: https://cloudops.works
#     Distributed Under Apache v2.0 License
#
name: Generate Containerized Python Application
author: cloudopsworks
description: Generate a containerized Python application
inputs:
  source_path:
    description: 'The path to the source code'
    required: false
    default: 'source'
  blueprint_path:
    description: 'The path to the blueprint'
    required: false
    default: 'bp'
  semver:
    description: 'The semver version to use for the build'
    required: true
  python_version:
    description: 'The Python version to use for the build'
    required: true
  python_dist:
    description: 'The Python distribution to use for the build'
    required: true
  python_image_variant:
    description: 'The Python image variant to use for the build'
    required: true
  environment:
    description: 'The environment to use for the build'
    required: true
  is_release:
    description: 'The release flag'
    required: true
  default_registry_address:
    description: 'The default registry'
    required: true
  project_key:
    description: 'The project name key'
    required: true
  project_owner:
    description: 'The project owner'
    required: true

runs:
  using: 'composite'
  steps:
    # Recover the docker_registry value from the environment file
    - name: Get Docker Registry value if set into the ENV file
      id: docker_registry
      uses: mikefarah/yq@master
      with:
        cmd: yq -I=0 '.container_registry // "${{ inputs.default_registry_address }}"' ./${{ inputs.source_path }}/.github/vars/inputs-${{ inputs.environment }}.yaml

    # get from global inputs the docker inline specification as text
    - name: Get Docker Inline Setting
      id: docker_inline
      uses: mikefarah/yq@master
      with:
        cmd: yq e -I=0 '.docker_inline // ""' ./${{ inputs.source_path }}/.github/vars/inputs-global.yaml

    # get from global inputs docker arguments, also as text
    - name: Get Docker Arguments
      id: docker_args_global
      uses: mikefarah/yq@master
      with:
        cmd: yq e -I=0 '.docker_args // ""' ./${{ inputs.source_path }}/.github/vars/inputs-global.yaml

    # get from environmental inputs the docker arguments will override the one set on docker_args,also as text
    - name: Get Docker Arguments for ${{ inputs.environment }}
      id: docker_args_env
      uses: mikefarah/yq@master
      with:
        cmd: yq e -I=0 '.docker_args // ""' ./${{ inputs.source_path }}/.github/vars/inputs-${{ inputs.environment }}.yaml

    # get custom_run_command from global inputs
    - name: Get Custom Run Command
      id: custom_run_command
      uses: mikefarah/yq@master
      with:
        cmd: yq e -I=0 '.custom_run_command // ""' ./${{ inputs.source_path }}/.github/vars/inputs-global.yaml

    # Get custom_usergroup Line item from configuration
    - name: Get Custom Usergroup
      id: custom_usergroup
      uses: mikefarah/yq@master
      with:
        cmd: yq e -I=0 '.custom_usergroup // ""' ./${{ inputs.source_path }}/.github/vars/inputs-global.yaml

    # Copy Dockerfile from blueprint to current dir
    - name: Copy Dockerfile Python App
      shell: bash
      run: |
        cp -pf ${{ inputs.blueprint_path }}/ci/container/blueprints/java/* ${{ inputs.source_path }}/
        cp -pf ${{ inputs.blueprint_path }}/ci/container/blueprints/java/.dockerignore ${{ inputs.source_path }}/

    - name: Dockerfile Python Specific Injection
      working-directory: ${{ inputs.source_path }}
      shell: bash
      run: |
        echo "::group::Injecting Python content in Dockerfile..."
        DOCKERFILE=Dockerfile
        TEMP_FILE=$(mktemp)
        INJECTION_POINT="#<PYTHON-INJECTION-POINT>"
        while IFS= read -r line; do
          if [[ "$line" =~ $INJECTION_POINT ]]; then
            # Run pip install with requirements.txt
            echo "RUN pip install -r requirements.txt"
            echo "${{ inputs.docker_inline }}"
          else
            # Print the current line
            echo "$line"
          fi
        done < "$DOCKERFILE" > "$TEMP_FILE"
        mv "$TEMP_FILE" "$DOCKERFILE"
        cat "$DOCKERFILE"
        echo "::endgroup::"

    # Python version image settings (adopt is deprecated)
    - name: Set output with Python Version
      id: docker_image_name
      shell: bash
      run: |
        if [ "${{ inputs.python_version }}" != "" ] ; then
          if [ "${{ inputs.python_image_variant }}" != "" ] ; then
            echo "result=IMAGE_NAME=python:${{ inputs.python_version }}-${{ inputs.python_image_variant }}" >> $GITHUB_OUTPUT
          else
            echo "result=IMAGE_NAME=python:${{ inputs.python_version }}-alpine" >> $GITHUB_OUTPUT
          fi
        fi

    # if custom_run_command is non empty then need to override the startup.sh scripts with new content, write the file in-place
    - name: Set custom run command
      working-directory: ${{ inputs.source_path }}
      if: ${{ steps.custom_run_command.outputs.result != '' }}
      shell: bash
      run: |
        echo "Creation of custom startup.sh script..."
        cat > ./startup.sh << EOF
        #!/bin/sh
        
        # Startup the Python App (custom command)
        cd /app/webapp
        $CUSTOM_RUN_COMMAND
        EOF
        cat ./startup.sh
      env:
        CUSTOM_RUN_COMMAND: ${{ steps.custom_run_command.outputs.result }}

    # Run Generalized Docker Build & Upload Artifact
    - name: Generalized Docker Build
      uses: ./bp/ci/container/build
      with:
        semver: ${{ inputs.semver }}
        docker_registry: ${{ steps.docker_registry.outputs.result }}
        docker_inline: ${{ steps.docker_inline.outputs.result }}
        docker_image_name: ${{ steps.docker_image_name.outputs.result }}
        docker_args: ${{ steps.docker_args_env.outputs.result == '' && steps.docker_args_global.outputs.result || steps.docker_args_env.outputs.result }}
        environment: ${{ inputs.environment }}
        project_key: ${{ inputs.project_key }}
        project_owner: ${{ inputs.project_owner }}
        custom_usergroup: ${{ steps.custom_usergroup.outputs.result }}
