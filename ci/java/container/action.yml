##
# (c) 2024 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Generate Containerized Java Application
author: cloudopsworks
description: Generate a containerized Java application
inputs:
  source_path:
    description: 'The path to the source code'
    required: false
    default: 'source'
  blueprint_path:
    description: 'The path to the blueprint'
    required: false
    default: 'bp'
  semver:
    description: 'The semver version to use for the build'
    required: true
  java_version:
    description: 'The Java version to use for the build'
    required: true
  java_dist:
    description: 'The Java distribution to use for the build'
    required: true
  java_image_variant:
    description: 'The Java image variant to use for the build'
    required: true
  environment:
    description: 'The environment to use for the build'
    required: true
  is_release:
    description: 'The release flag'
    required: true
  default_registry_address:
    description: 'The default registry'
    required: true
  project_key:
    description: 'The project name key'
    required: true
  project_owner:
    description: 'The project owner'
    required: true
  observability_enabled:
    description: 'The observability flag'
    required: false
    default: 'false'
  observability_agent:
    description: 'The observability agent'
    required: false
    default: 'xray'

runs:
  using: 'composite'
  steps:
    # Recover the docker_registry value from the environment file
    - name: Get Docker Registry value if set into the ENV file
      id: docker_registry
      uses: mikefarah/yq@master
      with:
        cmd: yq -I=0 '.container_registry // "${{ inputs.default_registry_address }}"' ./${{ inputs.source_path }}/.github/vars/inputs-${{ inputs.environment }}.yaml

    # get from global inputs the docker inline specification as text
    - name: Get Docker Inline Setting
      id: docker_inline
      uses: mikefarah/yq@master
      with:
        cmd: yq e -I=0 '.docker_inline // ""' ./${{ inputs.source_path }}/.github/vars/inputs-global.yaml

    # get from global inputs docker arguments, also as text
    - name: Get Docker Arguments
      id: docker_args_global
      uses: mikefarah/yq@master
      with:
        cmd: yq e -I=0 '.docker_args // ""' ./${{ inputs.source_path }}/.github/vars/inputs-global.yaml

    # get from environmental inputs the docker arguments will override the one set on docker_args,also as text
    - name: Get Docker Arguments for ${{ inputs.environment }}
      id: docker_args_env
      uses: mikefarah/yq@master
      with:
        cmd: yq e -I=0 '.docker_args // ""' ./${{ inputs.source_path }}/.github/vars/inputs-${{ inputs.environment }}.yaml

    # get custom_run_command from global inputs
    - name: Get Custom Run Command
      id: custom_run_command
      uses: mikefarah/yq@master
      with:
        cmd: yq e -I=0 '.custom_run_command // ""' ./${{ inputs.source_path }}/.github/vars/inputs-global.yaml

    # Get custom_usergroup Line item from configuration
    - name: Get Custom Usergroup
      id: custom_usergroup
      uses: mikefarah/yq@master
      with:
        cmd: yq e -I=0 '.custom_usergroup // ""' ./${{ inputs.source_path }}/.github/vars/inputs-global.yaml

    # Copy Dockerfile from blueprint to current dir
    - name: Copy Dockerfile Java App
      shell: bash
      run: |
        cp -pf ${{ inputs.blueprint_path }}/ci/container/blueprints/java/* ${{ inputs.source_path }}/
        cp -pf ${{ inputs.blueprint_path }}/ci/container/blueprints/java/.dockerignore ${{ inputs.source_path }}/

    - name: Get xray config file from inputs-globa.yaml
      shell: bash
      id: xray_config_file
      if: ${{ inputs.observability_enabled == 'true' && inputs.observability_agent == 'xray' }}
      uses: mikefarah/yq@master
      with:
        cmd: yq e -I=0 '.observability.config.configFilePath // "/app/xray" + "/"  + .observability.config.configFileName // "xray-config.json"' ./${{ inputs.source_path }}/.github/vars/inputs-global.yaml

    - name: Dockerfile Java Specific Injection
      working-directory: ${{ inputs.source_path }}
      shell: bash
      run: |
        echo "::group::Injecting Java content in Dockerfile..."
        DOCKERFILE=Dockerfile
        TEMP_FILE=$(mktemp)
        INJECTION_POINT="#<JAVA-INJECTION-POINT>"
        while IFS= read -r line; do
          if [[ "$line" =~ $INJECTION_POINT ]]; then
            # Insert the content related to observability agent installation
            if [ "${{ inputs.observability_enabled }}" == "true" ]; then
              case "${{ inputs.observability_agent }}" in
                xray)
                  echo "RUN curl -sSL https://github.com/aws/aws-xray-java-agent/releases/latest/download/xray-agent.zip -o /app/webapp/xray-agent.zip"
                  echo "RUN unzip /app/webapp/xray-agent.zip -d /app/webapp"
                  echo "RUN rm /app/webapp/xray-agent.zip"
                  ;;
                datadog)
                  echo "ADD 'https://dtdg.co/latest-java-tracer' /app/webapp/dd-java-agent.jar"
                  ;;
              esac
            fi 
            # Insert the content of input at the injection point depending on conditions
            JARDEP=$(find target -name "*with-dependencies.jar" | head -1)
            if [ -n "$JARDEP" ]; then
              echo "COPY $JARDEP /app/webapp/app.jar"
            else
              [ -d target/libs/ ] && echo "COPY target/libs/* /app/webapp/libs/"
              echo "COPY target/*.jar /app/webapp/app.jar"
            fi
            echo "${{ inputs.docker_inline }}"
          else
            # Print the current line
            echo "$line"
          fi
        done < "$DOCKERFILE" > "$TEMP_FILE"
        mv "$TEMP_FILE" "$DOCKERFILE"
        cat "$DOCKERFILE"
        echo "::endgroup::"

    - name: APM Arguments setup
      id: apm_args
      shell: bash
      if: ${{ inputs.observability_enabled == 'true' }}
      run: |
        case "${{ inputs.observability_agent }}" in
          xray)
            echo "result=APM_ARGS=-javaagent:/app/webapp/disco/disco-java-agent.jar=pluginPath=/app/webapp/disco/disco-plugins -Dcom.amazonaws.xray.configFile=${{ steps.xray_config_file.outputs.result }}" >> $GITHUB_OUTPUT
            ;;
          datadog)
            echo "result=APM_ARGS=-javaagent:/app/webapp/dd-java-agent.jar" >> $GITHUB_OUTPUT
            ;;
        esac

    # Java version image settings (adopt is deprecated)
    - name: Set output with Java Version
      id: docker_image_name
      shell: bash
      run: |
        if [ "${{ inputs.java_version }}" != "" ] ; then
          case "${{ inputs.java_dist }}" in
            adopt)
              echo "result=IMAGE_NAME=adoptopenjdk:${{ inputs.java_version }}-${{ inputs.java_image_variant }}" >> $GITHUB_OUTPUT
              ;;
            zulu)
              case "${{ inputs.java_image_variant }}" in
                debian)
                  echo "result=IMAGE_NAME=azul/zulu-openjdk-debian:${{ inputs.java_version }}" >> $GITHUB_OUTPUT
                  ;;
                centos)
                  echo "result=IMAGE_NAME=azul/zulu-openjdk-centos:${{ inputs.java_version }}" >> $GITHUB_OUTPUT
                  ;;
                standard|std|slim)
                  echo "result=IMAGE_NAME=azul/zulu-openjdk:${{ inputs.java_version }}" >> $GITHUB_OUTPUT
                  ;;
                *)
                  echo "result=IMAGE_NAME=azul/zulu-openjdk-alpine:${{ inputs.java_version }}" >> $GITHUB_OUTPUT
                  ;;
              esac
              ;;
            corretto)
              echo "result=IMAGE_NAME=amazoncorretto:${{ inputs.java_version }}-${{ inputs.java_image_variant }}" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "result=IMAGE_NAME=eclipse-temurin:${{ inputs.java_version }}-${{ inputs.java_image_variant }}" >> $GITHUB_OUTPUT
              ;;
          esac
        fi

    # if custom_run_command is non empty then need to override the startup.sh scripts with new content, write the file in-place
    - name: Set custom run command
      working-directory: ${{ inputs.source_path }}
      if: ${{ steps.custom_run_command.outputs.result != '' }}
      shell: bash
      run: |
        echo "Creation of custom startup.sh script..."
        cat > ./startup.sh << EOF
        #!/bin/sh
        
        # Startup the Java App (custom command)
        cd /app/webapp
        $CUSTOM_RUN_COMMAND
        EOF
        cat ./startup.sh
      env:
        CUSTOM_RUN_COMMAND: ${{ steps.custom_run_command.outputs.result }}

    # Run Generalized Docker Build & Upload Artifact
    - name: Generalized Docker Build
      uses: ./bp/ci/container/build
      with:
        semver: ${{ inputs.semver }}
        docker_registry: ${{ steps.docker_registry.outputs.result }}
        docker_inline: ${{ steps.docker_inline.outputs.result }}
        docker_image_name: ${{ steps.docker_image_name.outputs.result }}
        docker_args: ${{ steps.docker_args_env.outputs.result == '' && steps.docker_args_global.outputs.result || steps.docker_args_env.outputs.result }}
        apm_args: ${{ inputs.observability_enabled == 'true' && steps.apm_args.outputs.result || '' }}
        environment: ${{ inputs.environment }}
        project_key: ${{ inputs.project_key }}
        project_owner: ${{ inputs.project_owner }}
        custom_usergroup: ${{ steps.custom_usergroup.outputs.result }}
