##
# (c) 2021-2025
#     Cloud Ops Works LLC - https://cloudops.works/
#     Find us on:
#       GitHub: https://github.com/cloudopsworks
#       WebSite: https://cloudops.works
#     Distributed Under Apache v2.0 License
#
name: Build NodeJS Sources
author: cloudopsworks
description: Build NodeJS sources and save artifacts, requires ci/nodejs/config/action.yml
inputs:
  source_path:
    description: 'The path to the source code'
    required: false
    default: 'source'
  blueprint_path:
    description: 'The path to the blueprint'
    required: false
    default: 'bp'
  artifacts_name:
    description: 'The name of the artifacts to save'
    required: false
    default: 'build_artifacts'
  sources_artifacts_name:
    description: 'The name of the sources to save'
    required: false
    default: 'source_artifacts'
  bot_user:
    description: 'The bot user to use for the build'
    required: true
  token:
    description: 'The github token to use for the build'
    required: true
  has_preview:
    description: 'The preview flag will process only for preview builds'
    required: false
    default: 'false'
  install_command:
    description: 'The install command'
    required: true
  build_command:
    description: 'The build command'
    required: true
  node_extra_env:
    description: 'The extra environment variables'
    required: true
  observability_enabled:
    description: 'The observability flag'
    required: false
    default: 'false'
  observability_agent:
    description: 'The observability agent'
    required: false
    default: 'xray'

outputs:
  node_version:
    description: 'The NodeJS version to use for the build'
    value: ${{ steps.node_version.outputs.result }}
  node_dist:
    description: 'The NodeJS distribution to use for the build'
    value: ${{ steps.node_dist.outputs.result }}
  node_image_variant:
    description: 'The NodeJS image variant to use for the build'
    value: ${{ steps.node_image_variant.outputs.result }}
  semver:
    description: 'The semver version'
    value: ${{ steps.semver.outputs.result }}
  package_name:
    description: 'The package name'
    value: ${{ steps.package_name.outputs.result }}

runs:
  using: 'composite'
  steps:
    # Get onwer from inputs-global.yaml
    - name: Get pipeline owner
      id: repo_owner
      uses: mikefarah/yq@master
      with:
        cmd: yq eval '.repository_owner // ""' ./${{ inputs.source_path }}/.github/vars/inputs-global.yaml

    # Get pipeline conf node version
    - name: Get pipeline node version
      id: node_version
      uses: mikefarah/yq@master
      with:
        cmd: yq eval '.node.version // "20"' ./${{ inputs.source_path }}/.github/vars/inputs-global.yaml

    # Get pipeline conf node dist
    - name: Get pipeline node dist
      id: node_dist
      uses: mikefarah/yq@master
      with:
        cmd: yq eval '.node.dist // "adopt"' ./${{ inputs.source_path }}/.github/vars/inputs-global.yaml

    # Get pipeline conf java image variant defaults to alpine
    - name: Get pipeline NodeJS image variant
      id: node_image_variant
      uses: mikefarah/yq@master
      with:
        cmd: yq e '.node.image_variant // "alpine"' ./${{ inputs.source_path }}/.github/vars/inputs-global.yaml

    # Get pipeline conf
    - name: Get pipeline zip packaging globs
      id: zip_globs_line
      uses: mikefarah/yq@master
      with:
        cmd: yq e '.zipGlobs[]' ./${{ inputs.source_path }}/.github/cloudopsworks-ci.yaml | tr '\n' ' '

    # Get pipeline conf
    - name: Get pipeline zip packaging exclude globs
      id: exclude_globs
      uses: mikefarah/yq@master
      with:
        cmd: yq e '.excludeGlobs[] | "!" + .' ./${{ inputs.source_path }}/.github/cloudopsworks-ci.yaml

    # Get pipeline conf
    - name: Get pipeline zip packaging exclude globs
      id: raw_exclude_globs
      uses: mikefarah/yq@master
      with:
        cmd: yq e '.excludeGlobs[]' ./${{ inputs.source_path }}/.github/cloudopsworks-ci.yaml

    # Get Package Name from package.json
    - name: Get package Name
      id: package_name
      uses: mikefarah/yq@master
      with:
        cmd: yq e -oj -r '.name' ${{ inputs.source_path }}/package.json

    # Setup Node JS for builds with version provided
    - name: Set Node Version
      uses: actions/setup-node@v4
      with:
        node-version: "${{ steps.node_version.outputs.result }}"
        check-latest: true
        token: ${{ inputs.token }}

    # Cache all NPM packages
    - name: Cache NPM packages
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json','**/npm-shrinkwrap.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    # Versioning SET
    - name: Version SET
      working-directory: ${{ inputs.source_path }}
      shell: bash
      run: |
        echo "::group::Node Version SET"
        make version
        echo "::endgroup::"
      env:
        GITHUB_ACTOR: ${{ inputs.bot_user }}
        GITHUB_TOKEN: ${{ inputs.token }}

    - name: Version Capture
      working-directory: ${{ inputs.source_path }}
      id: semver
      shell: bash
      run: |
        echo "result=$(cat VERSION)" >> $GITHUB_OUTPUT
    
    # Edit package.json in order to include repository for automatic linking
    - name: Package.JSON - REPO auto link
      uses: mikefarah/yq@master
      with:
        cmd: yq e -oj -i '.repository.type="git"|.repository.url="${{ github.repositoryUrl }}"' ${{ inputs.source_path }}/package.json

    # Install nyc jest and mocha globally
    - name: Install Global Dependencies
      shell: bash
      run: |
        echo "::group::Install Global Dependencies"
        npm install -g nyc jest mocha
        echo "::endgroup::"
      env:
        GITHUB_ACTOR: ${{ inputs.bot_user }}
        GITHUB_TOKEN: ${{ inputs.token }}

    # NPM config registry setup
    - name: NPM Config Registry Setup
      shell: bash
      run: |
        echo "::group::NPM Config Registry Setup"
        npm config --location=project set "//npm.pkg.github.com/:_authToken=$GITHUB_TOKEN"
        npm config --location=project set "@${{ steps.repo_owner.outputs.result }}:registry=https://npm.pkg.github.com/"
        echo "::endgroup::"
      env:
        GITHUB_ACTOR: ${{ inputs.bot_user }}
        GITHUB_TOKEN: ${{ inputs.token }}

    # Build the code!
    - name: Install Dependencies
      working-directory: ${{ inputs.source_path }}
      shell: bash
      run: |
        echo "::group::NPM Install"
        ${{ inputs.node_extra_env }} ${{ inputs.install_command }}
        echo "::endgroup::"
      env:
        GITHUB_ACTOR: ${{ inputs.bot_user }}
        GITHUB_TOKEN: ${{ inputs.token }}

    - name: Install AWS open telemetry
      if: ${{ inputs.observability_enabled == 'true' && inputs.observability_agent == 'xray' }}
      working-directory: ${{ inputs.source_path }}
      shell: bash
      run: |
        echo "::group::Install AWS Open Telemetry"
        npm install @aws/aws-distro-opentelemetry-node-autoinstrumentation
        echo "::endgroup::"

    # Build the code! build target MUST be defined in package.json
    - name: Run NPM Build
      working-directory: ${{ inputs.source_path }}
      shell: bash
      run: |
        echo "::group::NPM Build"
        ${{ inputs.node_extra_env }} ${{ inputs.build_command }}
        echo "::endgroup::"
      env:
        GITHUB_ACTOR: ${{ inputs.bot_user }}
        GITHUB_TOKEN: ${{ inputs.token }}

    # Test the code
    - name: Test Code
      working-directory: ${{ inputs.source_path }}
      shell: bash
      run: |
        echo "::group::NPM Test"
        CI=true DISPLAY=:99 ${{ inputs.node_extra_env }} nyc --reporter=html --reporter=lcov --reporter=text-summary --reporter=cobertura -- npm test --if-present --no-watch --no-progress --code-coverage --browsers=ChromeHeadless
        echo "::endgroup::"
      env:
        GITHUB_ACTOR: ${{ inputs.bot_user }}
        GITHUB_TOKEN: ${{ inputs.token }}

    # SBOM generation
    - name: SBOM Generation for Dtrack
      uses: CycloneDX/gh-node-module-generatebom@v1
      with:
        path: ${{ inputs.source_path }}
        output: "${{ inputs.source_path }}/bom.xml"

    # Removal of .npmrc file for security reasons
    - name: Remove .npmrc file
      working-directory: ${{ inputs.source_path }}
      shell: bash
      run: |
        echo "::group::Remove .npmrc file"
        [ -f .npmrc ] && rm -f .npmrc
        echo "::endgroup::"