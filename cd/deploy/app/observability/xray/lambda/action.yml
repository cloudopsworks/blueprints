##
# (c) 2024 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Xray Observability deployment setup for HELM
author: cloudopsworks
description: Xray Observability deployment setup for HELM chart
inputs:
  source_path:
    description: 'The path to the source code'
    required: false
    default: 'source'
  blueprint_path:
    description: 'The path to the blueprint'
    required: false
    default: 'bp'
  cloud:
    description: 'The cloud'
    required: true
  release_name:
    description: 'The release name'
    required: true
  release_version:
    description: 'The release version'
    required: true
  project_key:
    description: 'The package name'
    required: true
  deployment_name:
    description: 'The deployment name'
    required: true
  environment:
    description: 'The environment'
    required: true

runs:
  using: 'composite'
  steps:
    - name: extract aws.region from inputs.yaml
      working-directory: ${{ inputs.blueprint_path }}/terraform/aws/lambda
      id: aws_region
      shell: bash
      run: echo "result=$(yq e '.aws.region // "us-east-1"' inputs.yaml)" >> $GITHUB_OUTPUT

    - name: extract lambda architecture from inputs.yaml
      working-directory: ${{ inputs.blueprint_path }}/terraform/aws/lambda
      id: arch
      shell: bash
      run: |
        larch=$(yq e '.lambda.arch // "x86_64"' inputs.yaml)
        if [ "$larch" == "x86_64" ]; then
          arch="amd64"
        else
          arch="arm64"
        fi
        echo "result=$arch" >> $GITHUB_OUTPUT

    - name: extract lambda runtime from inputs.yaml
      working-directory: ${{ inputs.blueprint_path }}/terraform/aws/lambda
      id: runtime
      shell: bash
      run: |
        lruntime=$(yq e '.lambda.runtime // ""' inputs.yaml)
        if [[ "$lruntime" =~ "node*" ]]; then
          runtime="aws-otel-nodejs-${{ steps.arch.outputs.result }}-ver-1-30-1:1"
        elif [[ "$lruntime" =~ "python*" ]]; then
          runtime="aws-otel-python-${{ steps.arch.outputs.result }}-ver-1-29-0:1"
        elif [[ "$lruntime" =~ "java*" ]]; then
          runtime="aws-otel-java-agent-${{ steps.arch.outputs.result }}-ver-1-32-0:4"
        fi
        echo "result=$runtime" >> $GITHUB_OUTPUT

    - name: Xray/OTEL variable Injection
      working-directory: ${{ inputs.blueprint_path }}/terraform/aws/lambda
      id: xray_inject
      shell: bash
      run: |
        echo "::group::Xray/OTEL variable Injection"
        yq e -i '.lambda.layers += [{"arn":"arn:aws:lambda:${{ steps.aws_region.outputs.result }}:901920570463:${{ steps.runtime.outputs.result }}"}]' inputs.yaml
        yq e -i '.lambda.environment.variables += [{"name":"AWS_LAMBDA_EXEC_WRAPPER","value":"/opt/otel-instrument"}]' inputs.yaml
        yq e -i '.lambda.iam.enabled = true' inputs.yaml
        yq e -i '.lambda.iam.policy_attachments += [{"arn":"arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess"}]' inputs.yaml
        echo "inputs.yaml:"
        cat inputs.yaml
        echo "::endgroup::"
