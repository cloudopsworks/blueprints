##
# (c) 2024 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Push Docker Image
author: cloudopsworks
description: Push Docker Image to registry
inputs:
  source_path:
    description: 'The path to the source code'
    required: false
    default: 'source'
  blueprint_path:
    description: 'The path to the blueprint'
    required: false
    default: 'bp'
  environment:
    description: 'The environment to use for the build'
    required: true
  cloud:
    description: 'The target cloud'
    required: true
  aws_region:
    description: 'The AWS Region'
    required: false
    default: ''
  aws_sts_role_arn:
    description: 'The AWS STS Role ARN'
    required: false
    default: ''
  aws_access_key_id:
    description: 'The AWS Access Key ID'
    required: false
    default: ''
  aws_secret_access_key:
    description: 'The AWS Secret Access Key'
    required: false
    default: ''
  azure_service_id:
    description: 'The Azure Service ID'
    required: false
    default: ''
  azure_service_secret:
    description: 'The Azure Service Secret'
    required: false
    default: ''
  default_registry_address:
    description: 'The default registry'
    required: true
  project_key:
    description: 'The project name as key'
    required: true
  project_owner:
    description: 'The project owner'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Download Docker Image
      uses: actions/download-artifact@v4
      with:
        name: docker-image

    - name: Set Crane Binary
      shell: bash
      working-directory: /tmp
      run: |
        echo "::group::Set Crane Binary"
        VERSION=$(curl -s "https://api.github.com/repos/google/go-containerregistry/releases/latest" | jq -r '.tag_name')
        OS=$(uname -s)
        ARCH=$(uname -m)
        curl -L "https://github.com/google/go-containerregistry/releases/download/${VERSION}/go-containerregistry_${OS}_${ARCH}.tar.gz" > go-containerregistry.tar.gz
        sudo tar -zxvf go-containerregistry.tar.gz -C /usr/local/bin/ crane
        echo "::endgroup::"

    # Recover the docker_registry value from the environment file
    - name: Get Docker Registry value if set into the ENV file
      id: docker_registry
      shell: bash
      run: |
        RET=$(yq -I=0 '.container_registry // "${{ inputs.default_registry_address }}"' ./${{ inputs.source_path }}/.github/vars/inputs-${{ inputs.environment }}.yaml)
        echo "result=$RET" >> $GITHUB_OUTPUT

    #
    # Docker Build login Azure
    - name: Docker Login Azure
      env:
        TARGET: ${{ inputs.cloud }}
      if: ${{ inputs.cloud == 'AZURE' }}
      uses: docker/login-action@v3
      with:
        registry: ${{ steps.docker_registry.outputs.result }}
        username: ${{ inputs.azure_service_id }}
        password: ${{ inputs.azure_service_secret }}
    #
    # Docker Build login AWS
    - name: Configure AWS Credentials
      if: ${{ inputs.cloud == 'AWS' && inputs.aws_sts_role_arn == '' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: ${{ inputs.aws_region }}

    #
    # Docker Build login AWS - w/Assume Role
    - name: Configure AWS Credentials with Assume Role
      if: ${{ inputs.cloud == 'AWS' && inputs.aws_sts_role_arn != '' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        role-to-assume: ${{ inputs.aws_sts_role_arn }}
        role-session-name: ${{ github.repository_id }}-build
        aws-region: ${{ inputs.aws_region }}

    - name: Docker Login AWS
      if: ${{  inputs.cloud == 'AWS' }}
      uses: docker/login-action@v3
      with:
        registry: ${{ steps.docker_registry.outputs.result }}

    - name: Check Docker Daemon
      id: docker_daemon
      shell: bash
      run: echo "result=$([ -S /var/run/docker.sock ] && echo 'true' || echo 'false')"

    - name: Push Docker image from tar
      shell: bash
      if: steps.docker_daemon.outputs.docker_daemon == 'true'
      run: |
        docker image load --input docker-image.tar
        docker image push --all-tags ${{ steps.docker_registry.outputs.result }}/${{ inputs.project_owner }}/${{ inputs.project_key }}

#    - name: Get Image Tags
#      id: tags
#      if: steps.docker_daemon.outputs.docker_daemon != 'true'
#      shell: bash
#      run: |
#        LIST=$(skopeo list-tags docker-archive:docker-image.tar | jq -r '.Tags[] | "docker:" + .' | tr '\n' ' ')
#        echo "Skopeo List: \"$LIST\""
#        echo "result=$LIST" >> $GITHUB_OUTPUT

    - name: Push Docker image from tar using Skopeo
      shell: bash
      if: steps.docker_daemon.outputs.docker_daemon != 'true'
      run: |
        echo "::group::Push Docker image from tar using Crane"
        #skopeo copy --all docker-archive:docker-image.tar ${{ steps.tags.outputs.result }}
        TAG=$(head -1 docker-tags.list)
        crane push docker-image.tar ${{ steps.docker_registry.outputs.result }}/${{ inputs.project_owner }}/${{ inputs.project_key }}:$TAG
        for atag in $(cat docker-tags.list); do
          if [ "$atag" != "$TAG" ]; then
            crane tag ${{ steps.docker_registry.outputs.result }}/${{ inputs.project_owner }}/${{ inputs.project_key }}:$TAG $atag
          fi
        done
        echo "::endgroup::"