##
# (c) 2021-2025
#     Cloud Ops Works LLC - https://cloudops.works/
#     Find us on:
#       GitHub: https://github.com/cloudopsworks
#       WebSite: https://cloudops.works
#     Distributed Under Apache v2.0 License
#
name: Deploy API AWS
author: cloudopsworks
description: Deploy API to AWS API Gateway
inputs:
  source_path:
    description: 'The path to the source code'
    required: false
    default: 'source'
  blueprint_path:
    description: 'The path to the blueprint'
    required: false
    default: 'bp'
  tofu_version:
    description: 'The version of OpenTofu to use'
    required: false
    default: '1.7.7'
  tg_version:
    description: 'The version of Terragrunt to use'
    required: false
    default: '0.76.3'
  tf_summarize_version:
    description: 'The version of tf-summarize to use'
    required: false
    default: '0.3.10'
  token:
    description: 'The GitHub token'
    required: true
  aws_region:
    description: 'The AWS region'
    required: true
  aws_sts_role_arn:
    description: 'The AWS STS Role ARN'
    required: true
  aws_access_key_id:
    description: 'The AWS access key ID'
    required: true
  aws_secret_access_key:
    description: 'The AWS secret access key'
    required: true
  terraform_state_conf:
    description: 'The Terraform state configuration'
    required: true
  unlock:
    description: 'Unlock the state'
    required: false
    default: false
  lock_id:
    description: 'The lock ID'
    required: false
    default: ''
  destroy:
    description: 'Destroy the state'
    required: false
    default: false
  release_name:
    description: 'The release name'
    required: true
  release_version:
    description: 'The release version'
    required: true
  project_key:
    description: 'The package name'
    required: true
  deployment_name:
    description: 'The deployment name'
    required: true
  environment:
    description: 'The environment'
    required: true
  artifacts_name:
    description: 'The name of the artifacts to save'
    required: false
    default: 'api_artifacts'

runs:
  using: 'composite'
  steps:
    - name: Terraform Plan prettifier
      uses: kishaningithub/setup-tf-summarize@v2
      with:
        github-token: ${{ inputs.token }}
        tf-summarize-version: v${{ inputs.tf_summarize_version }}

    - name: Setup OpenTofu
      id: setup_opentofu
      uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: ${{ inputs.tofu_version }}
        tofu_wrapper: false

    - name: Setup Terragrunt v${{ inputs.tg_version }}
      shell: bash
      run: |
        sudo wget -q -O /bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/v${{ inputs.tg_version }}/terragrunt_linux_amd64"
        sudo chmod +x /bin/terragrunt
        terragrunt -v

    - name: Create apigw directory
      shell: bash
      run: |
        mkdir -p ${{ inputs.blueprint_path }}/terraform/aws/apigw

    - name: Download API Artifacts
      uses: actions/download-artifact@v4
      if: ${{ inputs.unlock != 'true' && inputs.destroy != 'true' }}
      with:
        name: ${{ inputs.artifacts_name }}
        path: ${{ inputs.blueprint_path }}/terraform/aws/apigw/apifiles/

    - name: Copy configurations
      shell: bash
      run: |
        apis=$(yq eval -I=0 -r -oj '.apis[] | .name + "/" + .version' ${{ inputs.source_path }}/.github/vars/apigw/apis-global.yaml)
        for api in $apis; do
          api_name=$(echo $api | cut -d'/' -f1)
          api_version=$(echo $api | cut -d'/' -f2)
          echo "Copying API: $api_name version: $api_version"
          mkdir -p ${{ inputs.blueprint_path }}/terraform/aws/apigw/${api_name}/${api_version}
          yq eval 'with_entries(select(.key != "apigw_definitions"))'  ${{ inputs.source_path }}/.github/vars/apigw/apis-${{ inputs.environment }}.yaml > ${{ inputs.blueprint_path }}/terraform/aws/apigw/${api_name}/${api_version}/inputs-cloud.yaml
          yq eval ".apigw_definitions[] | select(.name + \"/\" + .version == \"$api\")" ${{ inputs.source_path }}/.github/vars/apigw/apis-${{ inputs.environment }}.yaml > ${{ inputs.blueprint_path }}/terraform/aws/apigw/${api_name}/${api_version}/inputs-api.yaml
          cp -pf ${{ inputs.source_path }}/.github/vars/inputs-global.yaml ${{ inputs.blueprint_path }}/terraform/aws/apigw/${api_name}/${api_version}/inputs-base.yaml
          cp -p ${{ inputs.blueprint_path }}/terraform/aws/apigw_template/*.hcl ${{ inputs.blueprint_path }}/terraform/aws/apigw/${api_name}/${api_version}/
          file_name_stub=$(yq eval -I=0 -r -oj '.file_name' ${{ inputs.blueprint_path }}/terraform/aws/apigw/${api_name}/${api_version}/inputs-api.yaml)
          echo "Rewriting API name and version in openapi file ${file_name_stub}"
          file_name=${{ inputs.blueprint_path }}/terraform/aws/apigw/apifiles/${file_name_stub}.yaml
          if [ -f "${{ inputs.blueprint_path }}/terraform/aws/apigw/apifiles/${file_name_stub}.json" ]; then
            echo "Found JSON file, using that instead of YAML"
            file_name=${{ inputs.blueprint_path }}/terraform/aws/apigw/apifiles/${file_name_stub}.json
          fi
          echo "File name: ${file_name}"
          [ -f $file_name ] || exit 1
          yq eval -i ".info.title = \"${api_name}\"" ${file_name}
          yq eval -i ".info.version = \"${api_version}\"" ${file_name}
        done

    - name: Get cloud_type from inputs-global.yaml
      id: cloud_type
      shell: bash
      run: |
        ret=$(yq eval -I=0 -r -oj '.cloud_type' ${{ inputs.source_path }}/.github/vars/inputs-global.yaml)
        echo "result=${ret}" >> $GITHUB_OUTPUT

    - name: Generate release.yaml
      working-directory: ${{ inputs.blueprint_path }}/terraform/aws/apigw
      shell: bash
      run: |
        cat > release.yaml << EOF 
        release:
          name: ${{ inputs.release_name }}
          source:
            name: ${{ inputs.project_key }}
            version: ${{ inputs.release_version }}
        EOF

    - name: Generate Global Inputs global-inputs.yaml
      working-directory: ${{ inputs.blueprint_path }}/terraform/aws
      shell: bash
      run: |
        cat > global-inputs.yaml << EOF
        environment: ${{ inputs.deployment_name }}
        release_name: ${{ inputs.release_name }}
        cloud_type: ${{ steps.cloud_type.outputs.result }}
        default:
          region: ${{ inputs.aws_region != '' && inputs.aws_region }}
          sts_role_arn: ${{ inputs.aws_sts_role_arn != '' && inputs.aws_sts_role_arn }}
        EOF

    - name: Generate state_conf.yaml from vars.DEPLOYMENT_STATE_CONF
      working-directory: ${{ inputs.blueprint_path }}/terraform/aws
      shell: bash
      run: |
        cat > state_conf.yaml << EOF
        ${{ inputs.terraform_state_conf }}
        EOF

      # Migrates the APIGW terraform state from blueprint v5.8 to v5.9
    - name: Migrate APIGW Terraform state
      shell: bash
      run: |
        set -x
        apis=$(yq eval -I=0 -r -oj '.apis[] | .name + "/" + .version' ${{ inputs.source_path }}/.github/vars/apigw/apis-global.yaml)
        for api in $apis; do
          api_name=$(echo $api | cut -d'/' -f1)
          api_version=$(echo $api | cut -d'/' -f2)
          bucket=$(yq eval -I=0 -r -oj '.s3.bucket' ${{ inputs.blueprint_path }}/terraform/aws/state_conf.yaml)
          file=$(aws s3 ls s3://${bucket}/deployments/${{ inputs.deployment_name }}/${{ inputs.release_name }}/apigw/terraform.tfstate)
          result=$?
          if [ $result -eq 0 ]; then
            echo "::warning::Migrating APIGW Terraform state for API: $api_name version: $api_version"
            aws s3 mv s3://${bucket}/deployments/${{ inputs.deployment_name }}/${{ inputs.release_name }}/apigw/terraform.tfstate \
              s3://${bucket}/deployments/${{ inputs.deployment_name }}/${{ inputs.release_name }}/apigw/${api_name}/${api_version}/terraform.tfstate
            if [ $? -ne 0 ]; then
              echo "::error::Failed to migrate APIGW Terraform state for API: $api_name version: $api_version"
              exit 1
            fi
            echo "::info::APIGW Terraform state migrated for API: $api_name version: $api_version"
          else
            echo "No APIGW Terraform state found for API: $api_name version: $api_version, no migration needed."
          fi
          break
        done
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}

    - name: Determine Plan Action
      uses: actions/github-script@v7
      id: plan_action
      with:
        script: |
          const is_destroy = ${{ inputs.destroy }};
          const is_unlock = ${{ inputs.unlock }};
          if (is_destroy) {
            core.setOutput('value', 'plan -destroy -no-color -input=false')
            console.log('destroy');
          } else {
            if (is_unlock) {
              core.setOutput('value', 'force-unlock -force ${{ inputs.lock_id }}')
              console.log('unlock');
            } else {
              core.setOutput('value', 'plan -no-color -input=false')
              console.log('apply');
            }
          }

    - name: Terragrunt Plan
      id: plan
      working-directory: ${{ inputs.blueprint_path }}/terraform/aws/apigw
      shell: bash
      run: |
        echo "::group::Terragrunt Plan"
        terragrunt --non-interactive run-all --out-dir=${{ github.workspace }}/.tfplan ${{ steps.plan_action.outputs.value }} -input=false
        echo "::endgroup::"
      continue-on-error: false
      env:
        TG_TF_PATH: tofu
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        GITHUB_API_TOKEN: ${{ inputs.token }}

    - name: Terragrunt Plan to JSON
      working-directory: ${{ inputs.blueprint_path }}/terraform/aws/apigw
      if: ${{ ! inputs.unlock && steps.plan.outcome == 'success' }}
      run: |
        echo "::group::Terragrunt Plan to JSON"
        terragrunt --non-interactive show -json plan.tfplan > tfplan.json
        echo "::endgroup::"
      shell: bash
      env:
        TG_TF_PATH: tofu
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        GITHUB_API_TOKEN: ${{ inputs.token }}

    - name: TF Summarize of JSON file
      working-directory: ${{ inputs.blueprint_path }}/terraform/aws/apigw
      if: ${{ ! inputs.unlock && steps.plan.outcome == 'success' }}
      shell: bash
      run: |
        echo "::group::TF Summarize of JSON file"
        tf-summarize tfplan.json
        echo "::endgroup::"

    - name: Save Plan Artifacts
      if: ${{ inputs.unlock != 'true' && inputs.destroy != 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifacts_name }}_iac
        retention-days: 1
        overwrite: true
        path: |
          ${{ inputs.blueprint_path }}/terraform/aws/**
          !**/.terragrunt-cache/**
          !**/.terraform/**

    - name: Terragrunt Apply
      id: apply
      working-directory: ${{ inputs.blueprint_path }}/terraform/aws/apigw
      if: ${{ inputs.unlock != 'true' && steps.plan.outcome == 'success' }}
      run: |
        echo "::group::Terragrunt Apply"
        terragrunt --non-interactive run-all --out-dir=${{ github.workspace }}/.tfplan apply -no-color
        echo "::endgroup::"
      shell: bash
      continue-on-error: false
      env:
        TG_TF_PATH: tofu
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        GITHUB_API_TOKEN: ${{ inputs.token }}
